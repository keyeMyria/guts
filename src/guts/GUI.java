/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package guts;

import java.awt.*;
import javax.swing.*;

/**
 *
 * @author patrick
 */
public class GUI extends JFrame {
    
    /**
     * Creates new form GUI
     */
    public GUI() {
        drawInterface();
        //initComponents();
        //jXMapKit1.setAddressLocation(new GeoPosition(52.483791,13.226141));

        //drawPitchVisualization();
        //drawCar();      
        //createMapKit();
    }
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 204));
        setForeground(new java.awt.Color(0, 204, 204));
        setResizable(false);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 887, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 886, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {       
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }
    
    private void drawInterface() {
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        setBackground(Color.lightGray);
        
        mainFrame = getContentPane();
        mainFrame.setBackground(Color.lightGray);
        mainFrame.setPreferredSize(new Dimension(1000,800));
        
        drawLeftPanel();
        drawMainPanel();

        mainFrame.add(leftPanel, BorderLayout.WEST);
        mainFrame.add(mainPanel);        
        
        pack();
    }
    
    private void drawLeftPanel() {
        leftPanel = new JPanel();
        leftPanel.setPreferredSize(new Dimension(250,600));
        leftPanel.setLayout(new BoxLayout(leftPanel,BoxLayout.PAGE_AXIS));
        
        sensorDataPanel = new JPanel(new GridLayout(8,1));
        sensorDataPanel.setBorder(BorderFactory.createTitledBorder("Sensordaten"));
        axisVisualPanel = new JPanel(new GridLayout(2,1));
        
        leftPanel.add(sensorDataPanel);
        leftPanel.add(axisVisualPanel);
    }
    
    private void drawMainPanel() {
        mainPanel = new JPanel();
        mainPanel.setPreferredSize(new Dimension(760,760));
        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.PAGE_AXIS));

        mainPanel.add(drawTopPanel());
        mainPanel.add(drawMapPanel());
    }
    
    private JPanel drawTopPanel() {
        topPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        topPanel.setLayout(new BoxLayout(topPanel,BoxLayout.LINE_AXIS));
        
        topPanel.add(drawStatusPanel());
        topPanel.add(drawAntennaControlPanel());
        topPanel.add(drawPositionControlPanel());
        
        return topPanel;
    }
    
    private TitledBox drawStatusPanel() {
        statusPanel = new TitledBox("Statusinformationen",320,100);
        
        antennaStatusLED = new StatusLED();
        positionStatusLED = new StatusLED();
        
        statusPanel.add(drawStatusLine(antennaStatusLED, "Antennenausrichtung"));
        statusPanel.add(Box.createRigidArea(new Dimension(0,3)));
        statusPanel.add(drawStatusLine(positionStatusLED, "Positionsausrichtung"));
        positionStatusLED.disable();

        
        return statusPanel;
    }
    
    private JPanel drawStatusLine(StatusLED led, String label) {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        
        panel.setBorder(BorderFactory.createEmptyBorder(4,10,4,10));
        panel.add(led);
        panel.add(Box.createRigidArea(new Dimension(3,0)));
        panel.add(new JLabel(label));
        panel.setAlignmentX(0);
        
        panel.setMaximumSize(new Dimension(290,30));
        
        return panel;
    }
    
    private TitledBox drawAntennaControlPanel() {
        antennaControlPanel = new TitledBox("Antennenausrichtung",220,100);
        
        // TODO drawAntennaSelection()
        // TODO drawAntennaControlToggleButton();
        
        return antennaControlPanel;
    }
    
    
    
    private TitledBox drawPositionControlPanel() {
        positionControlPanel = new TitledBox("Positionsaufzeichnung",220,100);
        
        // TODO drawPositionControlToggleButton();
        
        return positionControlPanel;
    }
    
    private JPanel drawMapPanel() {
        JPanel mapPanel = new JPanel();
        mapPanel.setBorder(BorderFactory.createTitledBorder("MapPanel"));
        
        return mapPanel;
    }
    
    private Container mainFrame;
    private JPanel leftPanel;
    private JPanel mainPanel;
    private JPanel topPanel;
    
    private JPanel sensorDataPanel;
    private JPanel axisVisualPanel;
    private TitledBox statusPanel;
    private TitledBox antennaControlPanel;
    private TitledBox positionControlPanel;
    
    private StatusLED antennaStatusLED;
    private StatusLED positionStatusLED;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
